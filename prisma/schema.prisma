// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL") //Connect to Supabase via connection pooling, supports serverless / edge
    directUrl = env("DIRECT_URL") //Connect to Supabase directly, for migrations
}

model Product {
    id                    String   @id @default(uuid())
    name                  String
    imagePath             String
    description           String
    videoUrl              String?
    condition             String
    priceInRupiah         Int
    stock                 Int
    isAvailableForPuchase Boolean  @default(false)
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    orders                Order[]
    storeId               String
    // If a store is deleted, delete all associated products
    store                 Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

    @@map("products")
}

model Store {
    id        String    @id @default(uuid())
    name      String
    imagePath String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    products  Product[]
    userId    String    @unique
    // if user is going to be deleted, but user has a store, 
    user      User      @relation(fields: [userId], references: [id], onDelete: Restrict)

    @@map("stores")
}

model Order {
    id                String   @id @default(uuid())
    pricePaidInRupiah Int
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    status            String   @default("WAITING_FOR_APPROVAL")

    userId    String
    productId String
    // if User is deleted, delete the associated orders
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    // if product is deleted, but it still has associated order, don't allow deletion
    product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

    @@map("orders")
}


model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    role          String    @default("CUSTOMER")

    accounts Account[]
    sessions Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    orders   Order[]
    provider String  @default("CREDENTIALS")
    store    Store?

    @@map("users")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
    @@map("verivication_tokens")
}